// Code generated by protoc-gen-go. DO NOT EDIT.
// source: kstinter.proto

package kstinter

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Req struct {
	BucketName           string   `protobuf:"bytes,1,opt,name=bucketName,proto3" json:"bucketName,omitempty"`
	Key                  string   `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Value                string   `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	Prefix               string   `protobuf:"bytes,4,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Dbname               string   `protobuf:"bytes,5,opt,name=dbname,proto3" json:"dbname,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Req) Reset()         { *m = Req{} }
func (m *Req) String() string { return proto.CompactTextString(m) }
func (*Req) ProtoMessage()    {}
func (*Req) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d0d0bb72c989a12, []int{0}
}

func (m *Req) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Req.Unmarshal(m, b)
}
func (m *Req) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Req.Marshal(b, m, deterministic)
}
func (m *Req) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Req.Merge(m, src)
}
func (m *Req) XXX_Size() int {
	return xxx_messageInfo_Req.Size(m)
}
func (m *Req) XXX_DiscardUnknown() {
	xxx_messageInfo_Req.DiscardUnknown(m)
}

var xxx_messageInfo_Req proto.InternalMessageInfo

func (m *Req) GetBucketName() string {
	if m != nil {
		return m.BucketName
	}
	return ""
}

func (m *Req) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Req) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *Req) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *Req) GetDbname() string {
	if m != nil {
		return m.Dbname
	}
	return ""
}

type Rsp struct {
	Value                string            `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	KVs                  map[string]string `protobuf:"bytes,2,rep,name=k_vs,json=kVs,proto3" json:"k_vs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Rsp) Reset()         { *m = Rsp{} }
func (m *Rsp) String() string { return proto.CompactTextString(m) }
func (*Rsp) ProtoMessage()    {}
func (*Rsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d0d0bb72c989a12, []int{1}
}

func (m *Rsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Rsp.Unmarshal(m, b)
}
func (m *Rsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Rsp.Marshal(b, m, deterministic)
}
func (m *Rsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rsp.Merge(m, src)
}
func (m *Rsp) XXX_Size() int {
	return xxx_messageInfo_Rsp.Size(m)
}
func (m *Rsp) XXX_DiscardUnknown() {
	xxx_messageInfo_Rsp.DiscardUnknown(m)
}

var xxx_messageInfo_Rsp proto.InternalMessageInfo

func (m *Rsp) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *Rsp) GetKVs() map[string]string {
	if m != nil {
		return m.KVs
	}
	return nil
}

func init() {
	proto.RegisterType((*Req)(nil), "kstinter.req")
	proto.RegisterType((*Rsp)(nil), "kstinter.rsp")
	proto.RegisterMapType((map[string]string)(nil), "kstinter.rsp.KVsEntry")
}

func init() { proto.RegisterFile("kstinter.proto", fileDescriptor_3d0d0bb72c989a12) }

var fileDescriptor_3d0d0bb72c989a12 = []byte{
	// 290 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xc1, 0x4b, 0xc3, 0x30,
	0x18, 0xc5, 0x6d, 0xb3, 0x95, 0xed, 0xd3, 0xc9, 0x08, 0x32, 0xca, 0x0e, 0x32, 0x7a, 0xaa, 0x08,
	0x3d, 0x54, 0x10, 0xf1, 0x38, 0x2b, 0x22, 0x05, 0x95, 0x1d, 0xe6, 0x51, 0x5a, 0xfd, 0xc4, 0xd2,
	0x9a, 0x65, 0x49, 0x36, 0xec, 0x41, 0xff, 0x3f, 0xff, 0x2b, 0x69, 0x62, 0x67, 0x85, 0xc1, 0x7a,
	0xcb, 0xfb, 0xe5, 0xf1, 0xf2, 0xbe, 0x24, 0x70, 0x98, 0x4b, 0x95, 0x31, 0x85, 0x22, 0xe0, 0x62,
	0xa1, 0x16, 0xb4, 0x57, 0x6b, 0xef, 0x13, 0x88, 0xc0, 0x25, 0x3d, 0x06, 0x48, 0x57, 0xcf, 0x39,
	0xaa, 0xbb, 0xe4, 0x1d, 0x5d, 0x6b, 0x62, 0xf9, 0xfd, 0x59, 0x83, 0xd0, 0x21, 0x90, 0x1c, 0x4b,
	0xd7, 0xd6, 0x1b, 0xd5, 0x92, 0x1e, 0x41, 0x77, 0x9d, 0x14, 0x2b, 0x74, 0x89, 0x66, 0x46, 0xd0,
	0x11, 0x38, 0x5c, 0xe0, 0x6b, 0xf6, 0xe1, 0x76, 0x34, 0xfe, 0x55, 0x15, 0x7f, 0x49, 0x59, 0x95,
	0xdd, 0x35, 0xdc, 0x28, 0xef, 0x0b, 0x88, 0x90, 0xfc, 0x2f, 0xcc, 0x6a, 0x86, 0x9d, 0x40, 0x27,
	0x7f, 0x5a, 0x4b, 0xd7, 0x9e, 0x10, 0x7f, 0x3f, 0x1c, 0x05, 0x9b, 0x21, 0x84, 0xe4, 0x41, 0x3c,
	0x97, 0xd7, 0x4c, 0x89, 0x72, 0x46, 0xf2, 0xb9, 0x1c, 0x9f, 0x43, 0xaf, 0x06, 0x75, 0x57, 0x6b,
	0x4b, 0x57, 0xbb, 0x11, 0x7f, 0x69, 0x5f, 0x58, 0xe1, 0xb7, 0x0d, 0x9b, 0xbb, 0xa0, 0x01, 0x1c,
	0x5c, 0x09, 0x4c, 0x14, 0x4e, 0xf5, 0xe0, 0x74, 0xd0, 0x38, 0x11, 0x97, 0xe3, 0xc1, 0xbf, 0x02,
	0xde, 0x1e, 0x3d, 0x85, 0x7e, 0x84, 0x45, 0x7b, 0xf3, 0x2d, 0x93, 0x28, 0x54, 0x8c, 0xe5, 0x4e,
	0xb3, 0x0f, 0x4e, 0x84, 0x45, 0x4b, 0xe7, 0x0d, 0xb6, 0xca, 0x0c, 0x61, 0x68, 0x9c, 0x8f, 0x99,
	0x7a, 0x7b, 0x30, 0xcf, 0xd2, 0xa2, 0xf4, 0x3d, 0x47, 0x16, 0x4b, 0x15, 0x4d, 0x77, 0x99, 0x53,
	0x47, 0xff, 0xad, 0xb3, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb6, 0x1e, 0xd0, 0x46, 0x6d, 0x02,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// KstinterClient is the client API for Kstinter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type KstinterClient interface {
	CreateBucket(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Rsp, error)
	DelBucket(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Rsp, error)
	InsertKey(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Rsp, error)
	DelKey(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Rsp, error)
	GetKey(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Rsp, error)
	GetKeyWithPrefix(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Rsp, error)
	OpenKstDB(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Rsp, error)
}

type kstinterClient struct {
	cc *grpc.ClientConn
}

func NewKstinterClient(cc *grpc.ClientConn) KstinterClient {
	return &kstinterClient{cc}
}

func (c *kstinterClient) CreateBucket(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Rsp, error) {
	out := new(Rsp)
	err := c.cc.Invoke(ctx, "/kstinter.kstinter/CreateBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kstinterClient) DelBucket(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Rsp, error) {
	out := new(Rsp)
	err := c.cc.Invoke(ctx, "/kstinter.kstinter/DelBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kstinterClient) InsertKey(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Rsp, error) {
	out := new(Rsp)
	err := c.cc.Invoke(ctx, "/kstinter.kstinter/InsertKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kstinterClient) DelKey(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Rsp, error) {
	out := new(Rsp)
	err := c.cc.Invoke(ctx, "/kstinter.kstinter/DelKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kstinterClient) GetKey(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Rsp, error) {
	out := new(Rsp)
	err := c.cc.Invoke(ctx, "/kstinter.kstinter/GetKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kstinterClient) GetKeyWithPrefix(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Rsp, error) {
	out := new(Rsp)
	err := c.cc.Invoke(ctx, "/kstinter.kstinter/GetKeyWithPrefix", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kstinterClient) OpenKstDB(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Rsp, error) {
	out := new(Rsp)
	err := c.cc.Invoke(ctx, "/kstinter.kstinter/OpenKstDB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KstinterServer is the server API for Kstinter service.
type KstinterServer interface {
	CreateBucket(context.Context, *Req) (*Rsp, error)
	DelBucket(context.Context, *Req) (*Rsp, error)
	InsertKey(context.Context, *Req) (*Rsp, error)
	DelKey(context.Context, *Req) (*Rsp, error)
	GetKey(context.Context, *Req) (*Rsp, error)
	GetKeyWithPrefix(context.Context, *Req) (*Rsp, error)
	OpenKstDB(context.Context, *Req) (*Rsp, error)
}

// UnimplementedKstinterServer can be embedded to have forward compatible implementations.
type UnimplementedKstinterServer struct {
}

func (*UnimplementedKstinterServer) CreateBucket(ctx context.Context, req *Req) (*Rsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBucket not implemented")
}
func (*UnimplementedKstinterServer) DelBucket(ctx context.Context, req *Req) (*Rsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelBucket not implemented")
}
func (*UnimplementedKstinterServer) InsertKey(ctx context.Context, req *Req) (*Rsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertKey not implemented")
}
func (*UnimplementedKstinterServer) DelKey(ctx context.Context, req *Req) (*Rsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelKey not implemented")
}
func (*UnimplementedKstinterServer) GetKey(ctx context.Context, req *Req) (*Rsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKey not implemented")
}
func (*UnimplementedKstinterServer) GetKeyWithPrefix(ctx context.Context, req *Req) (*Rsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKeyWithPrefix not implemented")
}
func (*UnimplementedKstinterServer) OpenKstDB(ctx context.Context, req *Req) (*Rsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenKstDB not implemented")
}

func RegisterKstinterServer(s *grpc.Server, srv KstinterServer) {
	s.RegisterService(&_Kstinter_serviceDesc, srv)
}

func _Kstinter_CreateBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KstinterServer).CreateBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kstinter.kstinter/CreateBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KstinterServer).CreateBucket(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kstinter_DelBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KstinterServer).DelBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kstinter.kstinter/DelBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KstinterServer).DelBucket(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kstinter_InsertKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KstinterServer).InsertKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kstinter.kstinter/InsertKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KstinterServer).InsertKey(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kstinter_DelKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KstinterServer).DelKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kstinter.kstinter/DelKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KstinterServer).DelKey(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kstinter_GetKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KstinterServer).GetKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kstinter.kstinter/GetKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KstinterServer).GetKey(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kstinter_GetKeyWithPrefix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KstinterServer).GetKeyWithPrefix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kstinter.kstinter/GetKeyWithPrefix",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KstinterServer).GetKeyWithPrefix(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kstinter_OpenKstDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KstinterServer).OpenKstDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kstinter.kstinter/OpenKstDB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KstinterServer).OpenKstDB(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

var _Kstinter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kstinter.kstinter",
	HandlerType: (*KstinterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBucket",
			Handler:    _Kstinter_CreateBucket_Handler,
		},
		{
			MethodName: "DelBucket",
			Handler:    _Kstinter_DelBucket_Handler,
		},
		{
			MethodName: "InsertKey",
			Handler:    _Kstinter_InsertKey_Handler,
		},
		{
			MethodName: "DelKey",
			Handler:    _Kstinter_DelKey_Handler,
		},
		{
			MethodName: "GetKey",
			Handler:    _Kstinter_GetKey_Handler,
		},
		{
			MethodName: "GetKeyWithPrefix",
			Handler:    _Kstinter_GetKeyWithPrefix_Handler,
		},
		{
			MethodName: "OpenKstDB",
			Handler:    _Kstinter_OpenKstDB_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kstinter.proto",
}
